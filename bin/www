#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('kdr-bot:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

var io = require('socket.io')(server);

var bot = app.get('bot');
//console.log(bot);

//log when someone connects to our server;
io.on('connection', function (socket) {
  console.log('a new user connected');
  socket.on('disconnect', function() {
    console.log('user disconnected');
  });
  socket.on('bot-connect', function (msg) {
    console.log('bot is connected');
    io.emit('bot-connect', msg);
  });
  socket.on('bot-disconnect', function (msg) {
    console.log('bot is disconnected');
    io.emit('bot-disconnect', msg);
  });
  socket.on('bot-on-pm', function (msg) {
    io.emit('bot-on-pm', msg);
  });
  socket.on('bot-message', function (msg) {
    io.emit('bot-message', msg);
  });
  socket.on('bot-irc-error', function (msg) {
    io.emit('bot-irc-error', (msg));
  });
  socket.on('bot-on-plus-mode', function (msg) {
    io.emit('bot-on-plus-mode', msg);
  });
  socket.on('bot-on-minus-mode', function (msg) {
    io.emit('bot-on-minus-mode', msg);
  });
  socket.on('bot-ctcp-version', function (msg) {
    io.emit('bot-ctcp-version', msg);
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
